swagger: "2.0"
info:
  description: "This is a sample of Ideia Original server. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/)."
  version: "1.0.0"
  title: "Swagger Ideia Original"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "ideiaoriginal.swagger.io"
basePath: "/v1"
tags:
- name: "user"
  description: "About the client user"
- name: "provider"
  description: "About the service provider"
- name: "category"
  description: "About available categories and services"
- name: "payment"
  description: "About the payment methods"
- name: "contract"
  description: "About service contracts between user and provider"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Add a new client user"
      operationId: "addUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created client user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs client user into the system"
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The client user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the client user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in client user session"
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get client user by ID"
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The ID that needs to be fetched."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Client user not found"
    put:
      tags:
      - "user"
      summary: "Update client user"
      description: "This can only be done by the logged in client user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of the user that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated client user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "Client user not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in client user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of the user that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid user ID supplied"
        "404":
          description: "Client user not found"
  /provider:
    post:
      tags:
      - "provider"
      summary: "Add a new service provider"
      operationId: "addProvider"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created service provider object"
        required: true
        schema:
          $ref: "#/definitions/Provider"
      responses:
        default:
          description: "successful operation"
  /provider/login:
    get:
      tags:
      - "provider"
      summary: "Logs service provider into the system"
      operationId: "loginProvider"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The service provider name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the service provider"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /provider/logout:
    get:
      tags:
      - "provider"
      summary: "Logs out current logged in service provider session"
      operationId: "logoutProvider"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /provider/{providerId}:
    get:
      tags:
      - "provider"
      summary: "Get service provider by ID"
      operationId: "getProviderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "providerId"
        in: "path"
        description: "ID of the service provider that needs to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Provider"
        "400":
          description: "Invalid service provider ID supplied"
        "404":
          description: "Service provider not found"
    put:
      tags:
      - "provider"
      summary: "Update service provider"
      description: "This can only be done by the logged in service provider."
      operationId: "updateProvider"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "providerId"
        in: "path"
        description: "ID of the service provider that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated service provider object"
        required: true
        schema:
          $ref: "#/definitions/Provider"
      responses:
        "400":
          description: "Invalid service provider supplied"
        "404":
          description: "Service provider not found"
    delete:
      tags:
      - "provider"
      summary: "Delete service provider"
      description: "This can only be done by the logged in service provider."
      operationId: "deleteProvider"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "providerId"
        in: "path"
        description: "ID of the service provider that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Service provider not found"
  /provider/{providerId}/service:
    post:
      tags:
      - "provider"
      summary: "Add an available service to a service provider"
      operationId: "addServiceToProvider"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "providerId"
        in: "path"
        description: "ID of service provider"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Add service object to a service provider"
        required: true
        schema:
          $ref: "#/definitions/Provider/properties/services/items"
      responses:
        "405":
          description: "Invalid input"
  /category:
    post:
      tags:
      - "category"
      summary: "Add a new category"
      operationId: "addCategory"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Category object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        "405":
          description: "Invalid input"
  /category/{categoryId}:
    get:
      tags:
      - "category"
      summary: "Find category by ID"
      operationId: "getCategoryById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Category"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Category not found"
    post:
      tags:
      - "category"
      summary: "Update a category"
      operationId: "updateCategory"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated service provider object"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "category"
      summary: "Deletes a category"
      operationId: "deleteCategory"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "Category ID to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Category not found"
  /category/{categoryId}/service:
    post:
      tags:
      - "category"
      summary: "Add a new service to a category"
      operationId: "addService"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of the category"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Add service object to a category"
        required: true
        schema:
          $ref: "#/definitions/Category/properties/services/items"
      responses:
        "405":
          description: "Invalid input"
  /category/{categoryId}/service/{serviceId}:
    get:
      tags:
      - "category"
      summary: "Find a service by ID inside of a category"
      operationId: "getServiceById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of the category"
        required: true
        type: "integer"
        format: "int64"
      - name: "serviceId"
        in: "path"
        description: "ID of the service to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Category/properties/services/items"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Service not found"
    post:
      tags:
      - "category"
      summary: "Update a service"
      operationId: "updateService"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of the category"
        required: true
        type: "integer"
        format: "int64"
      - name: "serviceId"
        in: "path"
        description: "ID of the service that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Update service object in a category"
        required: true
        schema:
          $ref: "#/definitions/Category/properties/services/items"
      responses:
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "category"
      summary: "Delete a service"
      operationId: "deleteService"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of the category"
        required: true
        type: "integer"
        format: "int64"
      - name: "serviceId"
        in: "path"
        description: "ID of the service that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Service not found"
  /payment:
    post:
      tags:
      - "payment"
      summary: "Add new payment method"
      operationId: "addPaymentMethod"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Payment method object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Payment"
      responses:
        "405":
          description: "Invalid input"
    get:
      tags:
      - "payment"
      summary: "Get payment method"
      operationId: "getPaymentMethod"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Payment method object to return"
        required: true
        schema:
          $ref: "#/definitions/Payment"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Contract"
        "400":
          description: "Invalid payment method supplied"
        "404":
          description: "Payment method not found"
    put:
      tags:
      - "payment"
      summary: "Update payment method"
      operationId: "updatePaymentMethod"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Payment method object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Payment"
      responses:
        "400":
          description: "Invalid payment method supplied"
        "404":
          description: "Payment method not found"
        "405":
          description: "Validation exception"
    delete:
      tags:
      - "payment"
      summary: "Delete payment method"
      operationId: "deletePaymentMethod"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Payment method object to delete"
        required: true
        schema:
          $ref: "#/definitions/Payment"
      responses:
        "400":
          description: "Invalid payment method supplied"
        "404":
          description: "Payment method not found"
  /contract:
    post:
      tags:
      - "contract"
      summary: "Add a new service contract"
      operationId: "addContract"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Contract object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "405":
          description: "Invalid input"
  /contract/{contractId}:
    get:
      tags:
      - "contract"
      summary: "Find contract by ID"
      operationId: "getContractById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "contractId"
        in: "path"
        description: "ID of contract to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Contract"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Contract not found"
    put:
      tags:
      - "contract"
      summary: "Update an existing contract"
      operationId: "updateContract"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "contractId"
        in: "path"
        description: "ID of contract that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Contract object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Contract not found"
        "405":
          description: "Validation exception"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      address:
        type: "string"
    xml:
      name: "User"
  Provider:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      address:
        type: "string"
      services:
        type: "array"
        items:
          type: "object"
          properties:
            serviceId:
              type: "integer"
              format: "int64"
            timeRequiredForService:
              type: "integer"
              format: "int64"
            servicePrice:
              type: "number"
              format: "float"
      rating:
        type: "number"
        format: "float"
    xml:
      name: "Provider"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      services:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
              format: "int64"
            name:
              type: "string"
    xml:
      name: "Category"
  Payment:
    type: "object"
    properties:
      paymentMethod:
        type: "string"
        description: "Payment method"
        enum:
        - "Credit card"
        - "Application balance"
    xml:
      name: "Payment"
  Contract:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user:
        type: "integer"
        format: "int64"
      provider:
        type: "integer"
        format: "int64"
      dueAmount:
        type: "number"
        format: "float"
      confirmationCode:
        type: "integer"
        format: "int64"
      paymentStatus:
        type: "string"
        enum:
        - "Pending"
        - "Paid"
        - "Canceled"
        - "Processing"
        - "Failed"
      complete:
        type: "boolean"
        default: false